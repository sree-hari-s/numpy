# -*- coding: utf-8 -*-
"""Mod4:Numpy Assignment.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K-18K7NIq7l7p5EHuGmZBGE5VFSBMZOC

1.Create a function that takes dimensions as tuples e.g.(3, 3) and a numeric value and returns a Numpy array of the given dimension filled with the given value e.g.: solve((3, 3), 5) will return

[ [5, 5, 5], 
  
  [5, 5, 5], 

  [5, 5, 5] ]
"""

#Q1
import numpy as np
def func(tup,x):
  return np.zeros((tup),dtype=int)+x
func((3,3),5)

"""2.Create a method that takes n Numpy arrays of same dimensions sums them and return the answer."""

#Q2
def sum1(*n):
    m=np.sum((n),axis=0) #columnwise
    print(m)
sum1(np.array([1,2,3]),np.array([1,2,3]),np.array([1,2,3]), np.array([3,4,5]))

def sum2(*n):
    m=np.sum((n),axis=1)  #row wise
    print(m)
sum2(np.array([1,2,3]),np.array([1,2,3]),np.array([1,2,3]))

"""3.Given a 2 D Array of N X M Dimension, Write a function that accepts this array as well as two numbers N and M. The method should return the top-left N X M sub matrix e.g:

[ [1, 2, 3], 

[4, 5, 6], 

[7, 8, 9], ] 

top_left_sub_matrix (matrix, 2, 2) -> should return: 

[ [1, 2] 

[4, 5] ]
"""

#Q3
matrix=np.array([1,2,3,4,5,6,7,8,9]).reshape(3,3)
matrix

def top_left_sub_matrix(matrix,b,d):
    print(matrix[:b,:d])
top_left_sub_matrix(matrix,2,2)

"""4.Given a 2 D Array of N X M Dimension, Write a function that accepts this array as well as two numbers N and M The method should return the bottom-right N X M sub matrix e.g.:

[[1, 2, 3],

[4, 5, 6],

[7, 8, 9],]

sub_matrix(matrix, 1, 1) -> should return : (Keep in mind these arrays are zero indexed)

[[5, 6]

[8, 9]]
"""

#Q4
matrix1=np.array([1,2,3,4,5,6,7,8,9]).reshape(3,3)
matrix1

def bottom_right_sub_matrix(matrix1,b,d):
    print(matrix1[b:,d:])
bottom_right_sub_matrix(matrix1,1,1)

"""5.Given a 1 D Numpy Array. Write a function that accepts this array as parameters. The method should return a dictionary with 'mean' and 'std_dev' as key and array's mean and array's standard deviation as values:

[1, 1, 1]

solution(arr) -> should return :

{'mean': 1.0, 'std_dev': 0.0}
"""

#Q5
def compute(p):
  m=np.mean(p)
  n=np.std(p)
  dict1={"mean":m,"std_dev":n}
  return dict1
compute([1,2,3])